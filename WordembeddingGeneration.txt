Next.js is a lightning-fast React framework trusted by data-heavy streaming sites like Hulu and Netflix. If you’re already versed in React, you should definitely get to know this increasingly popular technology.

Though both React and Next.js help create effective web user interfaces, they have some key differences: Next.js is more feature-rich and opinionated than React. It is especially well-suited for websites focused on search engine optimization (SEO) or pre-rendering.

Next.js vs. React
React, which debuted in 2013, is much more established than Next.js. But the younger framework, released in 2016, is growing in popularity, with more than 100K GitHub stars as of March 2023 and millions of weekly npm downloads. Let’s see how the two compare in four major areas:

Development speed: Next.js provides out-of-the-box features that ease the development process for making an advanced React app. With the introduction of its own compiler in Next.js 12, the framework also increased build speeds. Compared to React, Next.js reduces the amount of time an engineer needs to wait for code to refresh, minimizing developer frustration and slowdowns.
Data fetching and load times: Next.js can traverse the React tree and query for data in the server, allowing for pre-loaded page data. This often results in lower application load times for pages served by Next.js compared to pages written in vanilla React.
Rendering and SEO: Next.js offers pre-rendering, whereas React uses client-side rendering. Pre-rendered pages enable effective SEO strategies that are challenging to achieve in a plain React app.
Routing: Next.js provides a structured, predefined file system for routing. Its system offers reduced flexibility compared to React’s various library options (e.g., React Router), but simplifies page setup and routing.
React serves a variety of project types very well, including user dashboards, back-end systems, internal organization tools, and data visualization systems. Next.js is the ideal toolkit with which to enhance React applications that benefit from the power of pre-rendering, including e-commerce stores, social media apps, ticket-booking systems, and education platforms. Let’s explore some of its use cases in more detail.

Rendering in Next.js
Rendering is the process that converts React code into HTML that the browser then displays as the page’s user interface. Next.js provides three rendering methods—client-side rendering (CSR), server-side rendering (SSR), and static site generation (SSG)—and the added bonus of incremental static regeneration (ISR). ISR combines server-side rendering with a semi-static caching mechanism that relieves server load and provides speeds similar to those achieved by a static site.

Server-side rendering and static site generation fall under the umbrella of pre-rendering, in which HTML pages are generated before being sent to the client side. A great advantage of using Next.js is that it adds powerful support for pre-rendering React apps.

Client-side Rendering
Client-side rendering is the default for vanilla React applications. This method generates the page’s HTML on the client side. In other words, rendering efforts take place in the user’s browser, and JavaScript from the user’s device generates the HTML. The UI appears after the rendering is complete, when the webpage is also interactive (i.e., hydrated).

CSR is possible for Next.js components using React’s useEffect or useSWR.

Server-side Rendering
Next.js also enables the generation of a page’s HTML on the server. In this case, the generated HTML is sent to the client so that the webpage’s UI appears before hydration. Then, the viewable webpage is ready for interaction after the client finishes initializing the JavaScript.

On pages where we want Next.js to perform server-side rendering, some simple configuration functions are added to the page.

Static Site Generation
Next.js also offers static site generation, in which all static HTML pages are rendered from the JavaScript at build time. Generating a static site from a React code base requires more upfront build time compared to a React single-page application. However, the payoff here is having static content that can be served and cached at the maximum speed allowed by the site content without the computational overhead of SSR.

We can perform SSG on Next.js pages that we want to generate statically with getStaticProps() and getStaticPaths(), the latter of which defines the routes for static pages.

Next.js Search Engine Optimization
Next.js’s speed and ability to pre-render all pages of a website allows search engines to quickly and easily crawl and index the website, improving SEO. SEO is critical for many businesses and websites because websites with better SEO appear higher in search results. Users are more likely to click on higher-ranked websites, with the top result having an average click-through rate of 27.6%, a rate that is ten times greater than the tenth result’s click-through rate of 2.4%.

React websites with large amounts of content—and the resultant JavaScript code used for rendering—face SEO challenges when dealing with Google crawling and indexing.

The ability of Next.js to easily perform server-side rendering (SSR) not only enhances SEO rankings, but also improves a website’s perceived and actual load time for an optimal user experience.
Software engineering
Software engineering is an engineering-based approach to software development.
[1][2][3] A software
engineer is a person who applies the engineering design process to design, develop, maintain, test, and
evaluate computer software. The term programmer is sometimes used as a synonym, but may also refer
more to implementation rather than design and can also lack connotations of engineering education or
skills.
[4]
Engineering techniques are used to inform the software development process,
[1][5] which involves the
definition, implementation, assessment, measurement, management, change, and improvement of the
software life cycle process itself. It heavily uses software configuration management,
[1][5] which is about
systematically controlling changes to the configuration, and maintaining the integrity and traceability of the
configuration and code throughout the system life cycle. Modern processes use software versioning.
Beginning in the 1960s, software engineering was seen as its own type of engineering. Additionally, the
development of software engineering was seen as a struggle. It was difficult to keep up with the hardware
which caused many problems for software engineers. Problems included software that was over budget,
exceeded deadlines, required extensive de-bugging and maintenance, and unsuccessfully met the needs of
consumers or was never even completed. In 1968 NATO held the first Software Engineering conference
where issues related to software were addressed: guidelines and best practices for the development of
software were established.[6]
The origins of the term "software engineering" have been attributed to various sources. The term "software
engineering" appeared in a list of services offered by companies in the June 1965 issue of COMPUTERS
and AUTOMATION (http://www.bitsavers.org/magazines/Computers_And_Automation/196506.pdf) and
was used more formally in the August 1966 issue of Communications of the ACM (Volume 9, number 8)
“letter to the ACM membership” by the ACM President Anthony A. Oettinger,
[7][8]
it is also associated
with the title of a NATO conference in 1968 by Professor Friedrich L. Bauer, the first conference on
software engineering.[9] Margaret Hamilton described the discipline "software engineering" during the
Apollo missions to give what they were doing legitimacy.
[10] At the time there was perceived to be a
"software crisis".
[11][12][13] The 40th International Conference on Software Engineering (ICSE 2018)
celebrates 50 years of "Software Engineering" with the Plenary Sessions' keynotes of Frederick Brooks[14]
and Margaret Hamilton.
[15]
In 1984, the Software Engineering Institute (SEI) was established as a federally funded research and
development center headquartered on the campus of Carnegie Mellon University in Pittsburgh,
Pennsylvania, United States. Watts Humphrey founded the SEI Software Process Program, aimed at
understanding and managing the software engineering process. The Process Maturity Levels introduced
would become the Capability Maturity Model Integration for Development(CMMI-DEV), which has
defined how the US Government evaluates the abilities of a software development team.
History
Modern, generally accepted best-practices for software engineering have been collected by the ISO/IEC
JTC 1/SC 7 subcommittee and published as the Software Engineering Body of Knowledge
(SWEBOK).
[16]
 Software engineering is considered one of major computing disciplines.
[17]
Notable definitions of software engineering include:
"The systematic application of scientific and technological knowledge, methods, and
experience to the design, implementation, testing, and documentation of software"—The
Bureau of Labor Statistics—IEEE Systems and software engineering – Vocabulary
[18]
"The application of a systematic, disciplined, quantifiable approach to the development,
operation, and maintenance of software"—IEEE Standard Glossary of Software Engineering
Terminology
[19]
"an engineering discipline that is concerned with all aspects of software production"—Ian
Sommerville
[20]
"the establishment and use of sound engineering principles in order to economically obtain
software that is reliable and works efficiently on real machines"—Fritz Bauer
[21]
"a branch of computer science that deals with the design, implementation, and maintenance
of complex computer programs"—Merriam-Webster
[22]
"'software engineering' encompasses not just the act of writing code, but all of the tools and
processes an organization uses to build and maintain that code over time. [...] Software
engineering can be thought of as 'programming integrated over time.'"—Software
Engineering at Google
[23]
The term has also been used less formally:
as the informal contemporary term for the broad range of activities that were formerly called
computer programming and systems analysis;
[24]
as the broad term for all aspects of the practice of computer programming, as opposed to the
theory of computer programming, which is formally studied as a sub-discipline of computer
science;
[25]
as the term embodying the advocacy of a specific approach to computer programming, one
that urges that it be treated as an engineering discipline rather than an art or a craft, and
advocates the codification of recommended practices.[26]
Margaret Hamilton promoted the term "software engineering" during her work on the Apollo program. The
term "engineering" was used to acknowledge that the work should be taken just as seriously as other
contributions toward the advancement of technology. Hamilton details her use of the term:
When I first came up with the term, no one had heard of it before, at least in our world. It was
an ongoing joke for a long time. They liked to kid me about my radical ideas. It was a
memorable day when one of the most respected hardware gurus explained to everyone in a
meeting that he agreed with me that the process of building software should also be considered
Definitions and terminology
Etymology of "software engineer"
an engineering discipline, just like with hardware. Not because of his acceptance of the new
"term" per se, but because we had earned his and the acceptance of the others in the room as
being in an engineering field in its own right.
[27]
Individual commentators have disagreed sharply on how to define software engineering or its legitimacy as
an engineering discipline. David Parnas has said that software engineering is, in fact, a form of
engineering.[28][29] Steve McConnell has said that it is not, but that it should be.
[30] Donald Knuth has said
that programming is an art and a science.
[31] Edsger W. Dijkstra claimed that the terms software
engineering and software engineer have been misused and should be considered harmful, particularly in the
United States.
[32]
Requirements engineering is about the elicitation, analysis, specification, and validation of requirements for
software. Software requirements can be of three different types. There are functional requirements, nonfunctional requirements, and domain requirements. The operation of the software should be performed and
the proper output should be expected for the user to use. Non-functional requirements deal with issues like
portability, security, maintainability, reliability, scalability, performance, reusability, and flexibility. They are
classified into the following types: interface constraints, performance constraints (such as response time,
security, storage space, etc.), operating constraints, life cycle constraints (maintainability, portability, etc.),
and economic constraints. Knowledge of how the system or software works is needed when it comes to
specifying non-functional requirements. Domain requirements have to do with the characteristic of a certain
category or domain of projects.
[33]
Software design is about the process of defining the architecture, components, interfaces, and other
characteristics of a system or component. This is also called software architecture. Software design is
divided into three different levels of design. The three levels are interface design, architectural design, and
detailed design. Interface design is the interaction between a system and its environment. This happens at a
high level of abstraction along with the inner workings of the system. Architectural design has to do with
the major components of a system and their responsibilities, properties, interfaces, and their relationships
and interactions that occur between them. Detailed design is the internal elements of all the major system
components, their properties, relationships, processing, and usually their algorithms and the data
structures.
[34]
Suitability of the term
Tasks in large scale projects
Software requirements
Software design
Software construction
Software construction, the main activity of software development,
[1][5]
is the combination of programming,
unit testing, integration testing, and debugging so as to implement the design. Testing during this phase is
generally performed by the programmer while the software is under construction, to verify what was just
written and decide when the code is ready to be sent to the next step.
Software testing[1][5]
is an empirical, technical investigation conducted to provide stakeholders with
information about the quality of the product or service under test, with different approaches such as unit
testing and integration testing. It is one aspect of software quality. As a separate phase in software
development, it is typically performed by quality assurance staff or a developer other than the one who
wrote the code.
Software analysis is the process of analyzing the behavior of computer programs regarding a property such
as performance, robustness, and security It can be performed without executing the program (static program
analysis), during runtime (dynamic program analysis) or in a combination of both.
Software maintenance
[1][5]
refers to the activities required to provide cost-effective support after shipping
the software product. Software maintenance is modifying and updating software applications after
distribution to correct faults and to improve its performance. Software has a lot to do with the real world
and when the real world changes, software maintenance is required. Software maintenance includes: error
correction, optimization, deletion of unused and discarded features, and enhancement of features that
already exist. Usually, maintenance takes up about 40% to 80% of the project cost therefore, focusing on
maintenance keeps the costs down.[35]
Knowledge of computer programming is a prerequisite for becoming a software engineer. In 2004 the
IEEE Computer Society produced the SWEBOK, which has been published as ISO/IEC Technical Report
1979:2005, describing the body of knowledge that they recommend to be mastered by a graduate software
engineer with four years of experience.
[36] Many software engineers enter the profession by obtaining a
university degree or training at a vocational school. One standard international curriculum for
undergraduate software engineering degrees was defined by the Joint Task Force on Computing Curricula
of the IEEE Computer Society and the Association for Computing Machinery, and updated in 2014.[37] A
number of universities have Software Engineering degree programs; as of 2010, there were 244 Campus
Bachelor of Software Engineering programs, 70 Online programs, 230 Masters-level programs, 41
Doctorate-level programs, and 69 Certificate-level programs in the United States.
Software testing
Software analysis
Software maintenance
Education
In addition to university education, many companies sponsor internships for students wishing to pursue
careers in information technology. These internships can introduce the student to interesting real-world
tasks that typical software engineers encounter every day. Similar experience can be gained through
military service in software engineering.
Half of all practitioners today have degrees in computer science, information systems, or information
technology. A small, but growing, number of practitioners have software engineering degrees. In 1987, the
Department of Computing at Imperial College London introduced the first three-year software engineering
Bachelor's degree in the UK and the world; in the following year, the University of Sheffield established a
similar program.
[38]
In 1996, the Rochester Institute of Technology established the first software
engineering bachelor's degree program in the United States, however, it did not obtain ABET accreditation
until 2003, the same time as Rice University, Clarkson University, Milwaukee School of Engineering and
Mississippi State University obtained theirs.
[39]
In 1997, PSG College of Technology in Coimbatore, India
was the first to start a five-year integrated Master of Science degree in Software Engineering.
Since then, software engineering undergraduate degrees have been established at many universities. A
standard international curriculum for undergraduate software engineering degrees, SE2004, was defined by
a steering committee between 2001 and 2004 with funding from the Association for Computing Machinery
and the IEEE Computer Society. As of 2004, in the U.S., about 50 universities offer software engineering
degrees, which teach both computer science and engineering principles and practices. The first software
engineering Master's degree was established at Seattle University in 1979. Since then graduate software
engineering degrees have been made available from many more universities. Likewise in Canada, the
Canadian Engineering Accreditation Board (CEAB) of the Canadian Council of Professional Engineers
has recognized several software engineering programs.
In 1998, the US Naval Postgraduate School (NPS) established the first doctorate program in Software
Engineering in the world. Additionally, many online advanced degrees in Software Engineering have
appeared such as the Master of Science in Software Engineering (MSE) degree offered through the
Computer Science and Engineering Department at California State University, Fullerton. Steve McConnell
opines that because most universities teach computer science rather than software engineering, there is a
shortage of true software engineers.
[40] ETS (École de technologie supérieure) University and UQAM
(Université du Québec à Montréal) were mandated by IEEE to develop the Software Engineering Body of
Knowledge (SWEBOK), which has become an ISO standard describing the body of knowledge covered
by a software engineer.
[41]
Legal requirements for the licensing or certification of professional software engineers vary around the
world. In the UK, there is no licensing or legal requirement to assume or use the job title Software
Engineer. In some areas of Canada, such as Alberta, British Columbia, Ontario,[42] and Quebec, software
engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems
Professional (I.S.P.) designation. In Europe, Software Engineers can obtain the European Engineer (EUR
ING) professional title.
In the United States, the NCEES began offering a Professional Engineer exam for Software Engineering in
2013, thereby allowing Software Engineers to be licensed and recognized.[43] NCEES ended the exam
after April 2019 due to lack of participation.[44] Mandatory licensing is currently still largely debated, and
Software engineering degree programs
Profession
perceived as controversial. In some parts of the US such as Texas, the use of the term Engineer is regulated
by law and reserved only for use by individuals who have a Professional Engineer license.
The IEEE Computer Society and the ACM, the two main US-based professional organizations of software
engineering, publish guides to the profession of software engineering. The IEEE's Guide to the Software
Engineering Body of Knowledge – 2004 Version, or SWEBOK, defines the field and describes the
knowledge the IEEE expects a practicing software engineer to have. The most current SWEBOK v3 is an
updated version and was released in 2014.[45] The IEEE also promulgates a "Software Engineering Code
of Ethics".
[46]
There are an estimated 26.9 million professional software engineers in the world as of 2022, up from 21
million in 2016.[47][48]
Many software engineers work as employees or contractors. Software engineers work with businesses,
government agencies (civilian or military), and non-profit organizations. Some software engineers work for
themselves as freelancers. Some organizations have specialists to perform each of the tasks in the software
development process. Other organizations require software engineers to do many or all of them. In large
projects, people may specialize in only one role. In small projects, people may fill several or all roles at the
same time. Many companies hire interns, often university or college students during a summer break, or
externships. Specializations include analysts, architects, developers, testers, technical support, middleware
analysts, project managers, educators, and researchers.
Most software engineers and programmers work 40 hours a week, but about 15 percent of software
engineers and 11 percent of programmers worked more than 50 hours a week in 2008.[49] Potential injuries
in these occupations are possible because like other workers who spend long periods sitting in front of a
computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back
discomfort, and hand and wrist problems such as carpal tunnel syndrome.
[50]
The U. S. Bureau of Labor Statistics (BLS) counted 1,365,500 software developers holding jobs in the
U.S. in 2018.[51] Due to its relative newness as a field of study, formal education in software engineering is
often taught as part of a computer science curriculum, and many software engineers hold computer science
degrees.
[52] The BLS estimates from 2014 to 2024 that computer software engineering would increase by
17% .
[53] This is down from the 2012 to 2022 BLS estimate of 22% for software engineering.[54][53] And,
is further down from their 30% 2010 to 2020 BLS estimate.
[55] Due to this trend, job growth may not be as
fast as during the last decade, as jobs that would have gone to computer software engineers in the United
States would instead be outsourced to computer software engineers in countries such as India and other
foreign countries.
[56][49]
In addition, the BLS Job Outlook for Computer Programmers, 2014–24 predicts
an −8% (a decline, in their words),
[56]
then a decline in the Job Outlook, 2019-29 of -9%,
[57] and a 10%
decline for 2021-2031 for those who program computers.
[58][59] Furthermore, women in many software
fields has also been declining over the years as compared to other engineering fields.
[60] Then there is the
additional concern that recent advances in Artificial Intelligence might impact the demand for future
Employment
United States
generations of Software Engineers.
[61][62][63][64][65][66][67] However, this trend may change or slow in the
future as many current software engineers in the U.S. market leave the profession or age out of the market
in the next few decades.
[68]
The Software Engineering Institute offers certifications on specific topics like security, process
improvement and software architecture.
[69]
IBM, Microsoft and other companies also sponsor their own
certification examinations. Many IT certification programs are oriented toward specific technologies, and
managed by the vendors of these technologies.
[70] These certification programs are tailored to the
institutions that would employ people who use these technologies.
Broader certification of general software engineering skills is available through various professional
societies. As of 2006, the IEEE had certified over 575 software professionals as a Certified Software
Development Professional (CSDP).
[71]
In 2008 they added an entry-level certification known as the
Certified Software Development Associate (CSDA).
[72] The ACM had a professional certification program
in the early 1980s, which was discontinued due to lack of interest. The ACM examined the possibility of
professional certification of software engineers in the late 1990s, but eventually decided that such
certification was inappropriate for the professional industrial practice of software engineering.[73]
In the U.K. the British Computer Society has developed a legally recognized professional certification
called Chartered IT Professional (CITP), available to fully qualified members (MBCS). Software engineers
may be eligible for membership of the Institution of Engineering and Technology and so qualify for
Chartered Engineer status. In Canada the Canadian Information Processing Society has developed a legally
recognized professional certification called Information Systems Professional (ISP).
[74]
In Ontario, Canada,
Software Engineers who graduate from a Canadian Engineering Accreditation Board (CEAB) accredited
program, successfully complete PEO's (Professional Engineers Ontario) Professional Practice Examination
(PPE) and have at least 48 months of acceptable engineering experience are eligible to be licensed through
the Professional Engineers Ontario and can become Professional Engineers P.Eng.[75] The PEO does not
recognize any online or distance education however; and does not consider Computer Science programs to
be equivalent to software engineering programs despite the tremendous overlap between the two. This has
sparked controversy and a certification war. It has also held the number of P.Eng holders for the profession
exceptionally low. The vast majority of working professionals in the field hold a degree in CS, not SE.
Given the difficult certification path for holders of non-SE degrees, most never bother to pursue the license.
The initial impact of outsourcing, and the relatively lower cost of international human resources in
developing third world countries led to a massive migration of software development activities from
corporations in North America and Europe to India and later: China, Russia, and other developing
countries. This approach had some flaws, mainly the distance / time zone difference that prevented human
interaction between clients and developers and the massive job transfer. This had a negative impact on
many aspects of the software engineering profession. For example, some students in the developed world
avoid education related to software engineering because of the fear of offshore outsourcing (importing
software products or services from other countries) and of being displaced by foreign visa workers.
[76]
Although statistics do not currently show a threat to software engineering itself; a related career, computer
programming does appear to have been affected.[77][78] Nevertheless, the ability to smartly leverage
offshore and near-shore resources via the follow-the-sun workflow has improved the overall operational
capability of many organizations.
[79] When North Americans are leaving work, Asians are just arriving to
Certification
Impact of globalization
work. When Asians are leaving work, Europeans are arriving to work. This provides a continuous ability to
have human oversight on business-critical processes 24 hours per day, without paying overtime
compensation or disrupting a key human resource, sleep patterns.
While global outsourcing has several advantages, global – and generally distributed – development can run
into serious difficulties resulting from the distance between developers. This is due to the key elements of
this type of distance that have been identified as geographical, temporal, cultural and communication (that
includes the use of different languages and dialects of English in different locations).
[80] Research has been
carried out in the area of global software development over the last 15 years and an extensive body of
relevant work published that highlights the benefits and problems associated with the complex activity. As
with other aspects of software engineering research is ongoing in this and related areas.
There are several prizes in the field of software engineering:[81]
The Codie awards is a yearly award issued by the Software and Information Industry
Association for excellence in software development within the software industry.
JoltAwards are awards in the software industry.
Stevens Award is a software engineering award given in memory of Wayne Stevens.
Harlan Mills Award for "contributions to the theory and practice of the information sciences,
focused on software engineering".
Software engineering sees its practitioners as individuals who follow well-defined engineering approaches
to problem-solving. These approaches are specified in various software engineering books and research
papers, always with the connotations of predictability, precision, mitigated risk and professionalism. This
perspective has led to calls for licensing, certification and codified bodies of knowledge as mechanisms for
spreading the engineering knowledge and maturing the field.
Software engineering extends engineering and draws on the engineering model, i.e. engineering process,
engineering project management, engineering requirements, engineering design, engineering construction,
and engineering validation. The concept is so new that it is rarely understood, and it is widely
misinterpreted, including in software engineering textbooks, papers, and among the communities of
programmers and crafters.
One of the core issues in software engineering is that its approaches are not empirical enough because a
real-world validation of approaches is usually absent, or very limited and hence software engineering is
often misinterpreted as feasible only in a "theoretical environment."
Edsger Dijkstra, the founder of many of the concepts used within software development today, rejected the
idea of "software engineering" up until his death in 2002, arguing that those terms were poor analogies for
what he called the "radical novelty" of computer science:
A number of these phenomena have been bundled under the name "Software Engineering".
As economics is known as "The Miserable Science", software engineering should be known
as "The Doomed Discipline", doomed because it cannot even approach its goal since its goal
is self-contradictory. Software engineering, of course, presents itself as another worthy cause,
Prizes
Criticism
but that is eyewash: if you carefully read its literature and analyse what its devotees actually
do, you will discover that software engineering has accepted as its charter "How to program if
you cannot."[82]
Computer science
Data engineering
Software craftsmanship
Software development
Release engineering
Programmer
Systems analyst
Systems architect
Bachelor of Science in Information Technology
Bachelor of Software Engineering
List of software engineering conferences
List of computer science journals (including software engineering journals)
Software Engineering Institute
1. Abran et al. 2004, pp. 1–1
2. ACM (2007). "Computing Degrees & Careers" (http://computingcareers.acm.org/?page_id=1
2).ACM. Retrieved 2010-11-23.
3. Laplante, Phillip (2007). What Every Engineer Should Know about Software Engineering (ht
tps://books.google.com/books?id=pFHYk0KWAEgC&q=What%20Every%20Engineer%20S
hould%20Know%20about%20Software%20Engineering.&pg=PA1). Boca Raton: CRC.
ISBN 978-0-8493-7228-5. Retrieved 2011-01-21.
4. "Programmers: Stop Calling Yourselves Engineers" (https://www.theatlantic.com/technology/
archive/2015/11/programmers-should-not-call-themselves-engineers/414271/). The Atlantic.
5 November 2015.
5. "Software Engineering Body of Knowledge (SWEBOK Version 3), 2014" (https://www.compu
ter.org/web/swebok/v3) (pdf). www.swebok.org. IEEE Computer Society. Retrieved 24 May
2016.
See also
Study and practice
Roles
Professional aspects
References
Citations
6. "The history of coding and software engineering" (https://www.hackreactor.com/blog/the-hist
ory-of-coding-and-software-engineering). www.hackreactor.com. Retrieved 2021-05-06.
7. Oettinger,A. G. (1966). "President's Letter to the ACM Membership" (https://doi.org/10.114
5%2F365758.3291288). Commun.ACM.Association for Computing Machinery. 9 (8): 545–
546. doi:10.1145/365758.3291288 (https://doi.org/10.1145%2F365758.3291288).
ISSN 0001-0782 (https://www.worldcat.org/issn/0001-0782). S2CID 53432801 (https://api.se
manticscholar.org/CorpusID:53432801).
8. "The origin of "software engineering" " (https://bertrandmeyer.com/2013/04/04/the-origin-of-s
oftware-engineering/). 4 April 2013. Retrieved 17 November 2017.
9. Randall, Brian. "The 1968/69 NATO Software Engineering Reports" (http://homepages.cs.nc
l.ac.uk/brian.randell/NATO/NATOReports/). Retrieved 17 November 2017.
10. Software Magazine. "What to Know About the Scientist who Invented the Term "Software
Engineering" " (https://publications.computer.org/software-magazine/2018/06/08/margaret-h
amilton-software-engineering-pioneer-apollo-11/).Archived (https://web.archive.org/web/201
81124103748/https://publications.computer.org/software-magazine/2018/06/08/margaret-ha
milton-software-engineering-pioneer-apollo-11/) from the original on November 24, 2018.
Retrieved February 12, 2019.
11. Sommerville, Ian (2016). Software Engineering (10 ed.). England: Pearson Education
Limited. p. 19. ISBN 978-1-292-09613-1.
12. Peter, Naur; Randell, Brian (7–11 October 1968). Software Engineering: Report of a
conference sponsored by the NATO Science Committee (http://homepages.cs.ncl.ac.uk/bria
n.randell/NATO/nato1968.PDF) (PDF). Garmisch, Germany: Scientific Affairs Division,
NATO. Retrieved 2008-12-26.
13. Randell, Brian (10 August 2001). "The 1968/69 NATO Software Engineering Reports" (http://
homepages.cs.ncl.ac.uk/brian.randell/NATO/NATOReports/index.html). Brian Randell's
University Homepage. The School of the Computer Sciences, Newcastle University.
Retrieved 2008-10-11. "The idea for the first NATO Software Engineering Conference, and
in particular that of adopting the then practically unknown term "software engineering" as its
(deliberately provocative) title, I believe came originally from Professor Fritz Bauer."
14. 2018 International Conference on Software Engineering celebrating its 40th anniversary,
and 50 years of Software engineering. "ICSE 2018 – Plenary Sessions – Fred Brooks" (http
s://www.youtube.com/watch?v=StN49re9Nq8&t=67s). YouTube. Retrieved 9 August 2018.
15. 2018 International Conference on Software Engineering celebrating its 40th anniversary,
and 50 years of Software engineering. "ICSE 2018 – Plenary Sessions – Margaret
Hamilton" (https://www.youtube.com/watch?v=ZbVOF0Uk5lU). YouTube. Retrieved
9 August 2018.
16. "ISO/IEC TR 19759:2005" (http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_det
ail.htm?csnumber=33897). Retrieved 2012-04-01.
17. "The Joint Task Force for Computing Curricula 2005" (http://www.acm.org/education/curric_v
ols/CC2005-March06Final.pdf) (PDF). 2014-10-21.Archived (https://web.archive.org/web/20
141021153204/http://www.acm.org/education/curric_vols/CC2005-March06Final.pdf) (PDF)
from the original on 2014-10-21. Retrieved 2020-04-16.
18. Systems and software engineering – Vocabulary, ISO/IEC/IEEE std 24765:2010(E), 2010.
19. IEEE Standard Glossary of Software Engineering Terminology, IEEE std 610.12-1990,
1990.
20. Sommerville, Ian (2007) [1982]. "1.1.2 What is software engineering?" (http://www.pearsone
d.co.uk/HigherEducation/Booksby/Sommerville/). Software Engineering (8th ed.). Harlow,
England: Pearson Education. p. 7. ISBN 978-0-321-31379-9. "Software engineering is an
engineering discipline that is concerned with all aspects of software production from the
early stages of system specification to maintaining the system after it has gone into use. In
this definition, there are two key phrases:
1. Engineering discipline Engineers make things work. They apply theories, methods and
tools where these are appropriate [. . .] Engineers also recognize that they must work to
organizational and financial constraints. [. . .]
2. All aspects of software production Software engineering is not just concerned with the
technical processes of software development but also with activities such as software
project management and with the development of tools, methods and theories to support
software production."
21. "Software Engineering". Information Processing. 71: 530–538.
22. "Definition of SOFTWARE ENGINEERING" (https://www.merriam-webster.com/dictionary/so
ftware+engineering). www.merriam-webster.com. Retrieved 2019-11-25.
23. Winters, Titus; Manshrec, Tom; Wright, Hyrum (2020). "Preface, Programming Over Time".
Software Engineering at Google. O'Reilly Media, Inc. pp. xix–xx, 6–7. ISBN 978-1-492-
08279-8. "We propose that "software engineering" encompasses not just the act of writing
code, but all of the tools and processes an organization uses to build and maintain that code
over time. What practices can a software organization introduce that will best keep its code
valuable over the long term? How can engineers make a codebase more sustainable and
the software engineering discipline itself more rigorous?"
24. Akram I. Salah (2002-04-05). "Engineering an Academic Program in Software Engineering"
(http://www.micsymposium.org/mics_2002/SALAH.PDF) (PDF). 35th Annual Midwest
Instruction and Computing Symposium. Retrieved 2006-09-13.: "For some, software
engineering is just a glorified name for programming. If you are a programmer, you might put
'software engineer' on your business card—never 'programmer' though."
25. Mills, Harlan D., J. R. Newman, and C. B. Engle, Jr., "An Undergraduate Curriculum in
Software Engineering," in Deimel, Lionel E. (1990). Software Engineering Education: SEI
Conference 1990, Pittsburgh, Pennsylvania, USA,April 2–3,... Springer. ISBN 978-0-387-
97274-9.,p. 26 (https://books.google.com/books?id=ZuWbyy2blMEC&pg=PA26): "As a
practical matter, we regard software engineering as the necessary preparation for the
practicing, software development and maintenance professional. The Computer Scientist is
preparing for further theoretical studies..."
26. David Budgen; Pearl Brereton; Barbara Kitchenham; Stephen Linkman (2004-12-14).
"Realizing Evidence-based Software Engineering" (https://web.archive.org/web/200612170
13922/http://evidence.cs.keele.ac.uk/rebse.html).Archived from the original (http://evidence.
cs.keele.ac.uk/rebse.html) on 2006-12-17. Retrieved 2006-10-18.: "We believe that software
engineering can only advance as an engineering discipline by moving away from its current
dependence upon advocacy and analysis,...."
27. Lawrence, Snyder (2017). Fluency with information technology : skills, concepts, &
capabilities ([Seventh edition] ed.). NY, NY. ISBN 978-0134448725. OCLC 960641978 (http
s://www.worldcat.org/oclc/960641978).
28. Parnas, David L. (1998). "Software Engineering Programmes are not Computer Science
Programmes" (http://citeseer.ist.psu.edu/parnas98software.html). Annals of Software
Engineering. 6: 19–37. doi:10.1023/A:1018949113292 (https://doi.org/10.1023%2FA%3A10
18949113292). S2CID 35786237 (https://api.semanticscholar.org/CorpusID:35786237)., p.
19: "Rather than treat software engineering as a subfield of computer science, I treat it as an
element of the set, {Civil Engineering, Mechanical Engineering, Chemical Engineering,
Electrical Engineering,....}."
29. Parnas, David L. (1998). "Software Engineering Programmes are not Computer Science
Programmes" (http://citeseer.ist.psu.edu/parnas98software.html). Annals of Software
Engineering. 6: 19–37. doi:10.1023/A:1018949113292 (https://doi.org/10.1023%2FA%3A10
18949113292). S2CID 35786237 (https://api.semanticscholar.org/CorpusID:35786237)., p.
20: "This paper argues that the introduction of accredited professional programs in software
engineering, programmes that are modelled on programmes in traditional engineering
disciplines will help to increase both the quality and quantity of graduates who are well
prepared, by their education, to develop trustworthy software products."
30. McConnell, Steve (August 2003). Professional Software Development: Shorter Schedules,
Better Projects, Superior Products, Enhanced Careers (https://archive.org/details/profession
alsoft00mcco_0). Boston, MA:Addison-Wesley. ISBN 0-321-19367-9., p. 39: "In my opinion,
the answer to that question is clear: Professional software development should be
engineering. Is it? No. But should it be? Unquestionably, yes. "
31. Knuth, Donald (1974). "Computer Programming as an Art" (http://disciplinas.lia.ufc.br/matdis
061/arquivos/knuth-turingaward.pdf) (PDF). Communications of the ACM. 17 (12): 667–673.
doi:10.1145/361604.361612 (https://doi.org/10.1145%2F361604.361612).
S2CID 207685720 (https://api.semanticscholar.org/CorpusID:207685720).Transcript of the
1974 Turing Award lecture.
32. Dijkstra, Edsger W; transcribed by Mario Béland (November 23, 2004) [First published
December 3, 1993]. "There is still a war going on (manuscriptAustin, 3 December 1993)" (htt
p://www.cs.utexas.edu/users/EWD/transcriptions/EWD11xx/EWD1165.html). E. W. Dijkstra
Archive. The University of Texas atAustin, Department of Computer Sciences. Retrieved
February 17, 2007. "When the term was coined in 1968 by F.L. Bauer of the Technological
University of Munich, I welcomed it. [. . .] I interpreted the introduction of the term "software
engineering" as an apt reflection of the fact that the design of software systems was an
activity par excellence for the mathematical engineer. [. . .].As soon the term arrived in the
USA, it was relieved of all its technical content. It had to be so for in its original meaning it
was totally unacceptable [. . .] In the meantime, software engineering has become an almost
empty term, as was nicely demonstrated by Data General who overnight promoted all its
programmers to the exalted rank of "software engineer"!"
33. "Software Engineering | Classification of Software Requirements" (https://www.geeksforgee
ks.org/software-engineering-classification-of-software-requirements/). GeeksforGeeks. 2018-
06-19. Retrieved 2021-05-06.
34. "Software Engineering | Software Design Process" (https://www.geeksforgeeks.org/software
-engineering-software-design-process/). GeeksforGeeks. 2019-05-24. Retrieved
2021-05-06.
35. "What is Software Maintenance? Definition of Software Maintenance, Software Maintenance
Meaning" (https://economictimes.indiatimes.com/definition/software-maintenance). The
Economic Times. Retrieved 2021-05-06.
36. Abran,Alain, ed. (2005) [2004]. "Chapter 1: Introduction to the Guide" (https://web.archive.or
g/web/20160509154355/https://www.computer.org/portal/web/swebok). Guide to the
Software Engineering Body of Knowledge (http://www.computer.org/portal/web/swebok). Los
Alamitos: IEEE Computer Society. ISBN 978-0-7695-2330-9.Archived from the original (htt
p://www.computer.org/portal/web/swebok/html/ch1) on 2016-05-09. Retrieved 2010-09-13.
"The total volume of cited literature is intended to be suitable for mastery through the
completion of an undergraduate education plus four years of experience."
37. "SE2014 Software Engineering Curriculum" (https://www.acm.org/binaries/content/assets/ed
ucation/se2014.pdf) (PDF). Retrieved 7 April 2023.
38. Cowling,A. J. 1999. The first decade of an undergraduate degree program in software
engineering.Ann. Softw. Eng. 6, 1–4 (Apr. 1999), 61–90.
39. "ABET Accredited Engineering Programs" (https://web.archive.org/web/20100619233414/htt
p://abet.org/accrediteac.asp).April 3, 2007.Archived from the original (http://www.abet.org/ac
crediteac.asp) on June 19, 2010. Retrieved April 3, 2007.
40. McConnell, Steve (July 10, 2003). Professional Software Development: Shorter Schedules,
Higher Quality Products, More Successful Projects, Enhanced Careers. ISBN 978-0-321-
19367-4.
41. Software Engineering — Guide to the software engineering body of knowledge (SWEBOK)
(https://www.iso.org/standard/67604.html), International Organization for Standardization,
2015, retrieved January 11, 2020
42. Williams, N.S.W. (19–21 February 2001). "Professional Engineers Ontario's approach to
licensing software engineering practitioners". Software Engineering Education and Training,
2001 Proceedings. 14th Conference on. Charlotte, NC: IEEE. pp. 77–78.
43. "NCEES Software Engineering Exam Specifications" (https://web.archive.org/web/2013082
7220334/http://cdn1.ncees.co/wp-content/uploads/2012/11/Exam-specifications_PE-Softwar
e-Apr-2013.pdf) (PDF).Archived from the original (http://cdn1.ncees.co/wp-content/uploads/
2012/11/Exam-specifications_PE-Software-Apr-2013.pdf) (PDF) on 2013-08-27. Retrieved
2012-04-01.
44. "NCEES discontinuing PE Software Engineering exam" (https://ncees.org/ncees-discontinui
ng-pe-software-engineering-exam/). National Council of Examiners for Engineering and
Surveying. 13 March 2018. Retrieved 6 August 2018.
45. "SWEBOK Guide Version 3" (http://www.computer.org/web/swebok/v3). Retrieved
2015-03-09.
46. "Software Engineering Code of Ethics" (http://www.computer.org/cms/Computer.org/Publicati
ons/code-of-ethics.pdf) (PDF). Retrieved 2012-03-25.
47. Labs, Qubit (29 November 2022). "How Many Programmers are there in the World and in the
US? [2023]" (https://qubit-labs.com/how-many-programmers-in-the-world/). Qubit Labs.
Retrieved 7 February 2023.
48. "Global Developer Population and Demographic Study 2016 V2" (http://evansdata.com/repo
rts/viewRelease.php?reportID=9). Evans Data Corporation. Retrieved 19 January 2017.
49. Rosenthal, Rachel (August 4, 2020). "Tech Companies Want You to Believe America Has a
Skills Gap" (https://www.bloomberg.com/opinion/articles/2020-08-04/big-tech-wants-you-tobelieve-america-has-a-skills-gap). Bloomberg. Retrieved October 8, 2021.
50. "Computer Software Engineers and Computer Programmers" (http://www.bls.gov/oco/ocos3
03.htm#training). Retrieved 2009-12-17.
51. "Software Developers" (https://www.bls.gov/ooh/computer-and-information-technology/softw
are-developers.htm). Occupational Outlook Handbook. U. S. Bureau of labor Statistics. 4
September 2019. Retrieved 11 December 2019.
52. "Computing Disciplines and Majors" (https://www.acm.org/binaries/content/assets/educatio
n/computing-disciplines.pdf) (PDF).ACM. Retrieved 6 September 2019.
53. "Software Developers: Occupational Outlook Handbook" (http://www.bls.gov/ooh/computerand-information-technology/software-developers.htm). U.S. Bureau of Labor Statistics.
54. "Computer Software Engineer" (https://web.archive.org/web/20130726002354/http://www.bl
s.gov/k12/computers04.htm). Bureau of Labor Statistics. March 19, 2010.Archived from the
original (http://www.bls.gov/k12/computers04.htm) on July 26, 2013. Retrieved July 20,
2012.
55. "Software Developers" (http://www.bls.gov/ooh/computer-and-information-technology/softwa
re-developers.htm). Bureau of Labor Statistics. January 8, 2014. Retrieved July 21, 2012.
56. "Computer Programmers: Occupational Outlook Handbook" (http://www.bls.gov/ooh/comput
er-and-information-technology/computer-programmers.htm). U.S. Bureau of Labor Statistics.
57. "Computer Programmers : Occupational Outlook Handbook: : U.S. Bureau of Labor
Statistics" (https://www.bls.gov/ooh/computer-and-information-technology/computer-program
mers.htm). www.bls.gov.
58. "Archive By Publication : Beyond the Numbers: U.S. Bureau of Labor Statistics" (https://ww
w.bls.gov/opub/btn/archive/publication.htm#regional-reports). www.bls.gov.
59. "The Soon-to-Be-Extinct Embedded Software Engineer" (https://www.designnews.com/desi
gn-hardware-software/soon-be-extinct-embedded-software-engineer). designnews.com.
May 10, 2018.
60. "hp's Developer Portal | HP International Women's Week: Women in Computer Science
dropping since 1980s" (https://developers.hp.com/public/blog/hp-international-womens-wee
k-women-computer-science-dropping-1980s). developers.hp.com.
61. "Software engineer jobs in danger due to ChatGPT-like tools? Here's what Google CEO
Sundar Pichai has to say" (https://www.businesstoday.in/technology/news/story/software-en
gineer-jobs-in-danger-due-to-chatgpt-like-tools-heres-what-google-ceo-sundar-pichai-has-to
-say-376341-2023-04-06). Business Today. 2023-04-06. Retrieved 2023-05-12.
62. "ChatGPT could make these jobs obsolete" (https://nypost.com/2023/01/25/chat-gpt-could-m
ake-these-jobs-obsolete/). 2023-01-25. Retrieved 2023-05-12.
63. Kay, Grace. "Software engineers are panicking about being replaced by AI" (https://www.bus
inessinsider.com/software-engineers-tech-panicking-golden-age-over-chatgpt-ai-blind-2023-
4). Business Insider. Retrieved 2023-05-12.
64. Fowler, Gary. "Council Post: How Will ChatGPT Affect Jobs?" (https://www.forbes.com/sites/f
orbesbusinessdevelopmentcouncil/2023/03/16/how-will-chatgpt-affect-jobs/). Forbes.
Retrieved 2023-05-12.
65. Ito,Aki. "ChatGPT spells the end of coding as we know it" (https://www.businessinsider.com/
chatgpt-ai-technology-end-of-coding-software-developers-jobs-2023-4). Business Insider.
Retrieved 2023-05-12.
66. Zinkula,Aaron Mok, Jacob. "ChatGPT may be coming for our jobs. Here are the 10 roles that
AI is most likely to replace" (https://www.businessinsider.com/chatgpt-jobs-at-risk-replaceme
nt-artificial-intelligence-ai-labor-trends-2023-02). Business Insider. Retrieved 2023-05-12.
67. Cohen, Mikaela. "These are the tech jobs most threatened by ChatGPT and A.I." (https://ww
w.cnbc.com/2023/04/15/these-are-the-tech-jobs-most-threatened-by-chatgpt-and-ai.html)
CNBC. Retrieved 2023-05-12.
68. "Computer Programmers : Occupational Outlook Handbook: : U.S. Bureau of Labor
Statistics" (https://www.bls.gov/ooh/computer-and-information-technology/computer-program
mers.htm). www.bls.gov. Retrieved 7 April 2023.
69. "SEI certification page" (http://www.sei.cmu.edu/certification/). Sei.cmu.edu. Retrieved
2012-03-25.
70. Wyrostek, Warren (March 14, 2008). "The Top 10 Problems with IT Certification in 2008" (htt
p://www.informit.com/articles/article.aspx?p=1180991). InformIT. Retrieved 2009-03-03.
71. IEEE Computer Society. "2006 IEEE computer society report to the IFIP General Assembly"
(http://www.ifip.org/minutes/GA2006/Tab18b-US-IEEE.pdf) (PDF). Retrieved 2007-04-10.
72. IEEE. "CSDA" (http://www.computer.org/portal/web/certification/csda). Retrieved
2010-04-20.
73. ACM (July 17, 2000). "A Summary of the ACM Position on Software Engineering as a
Licensed Engineering Profession" (https://web.archive.org/web/20080517201804/http://ww
w.cs.wm.edu/~coppit/csci690-spring2004/papers/selep_main.pdf) (PDF).Association for
Computing Machinery (ACM).Archived from the original (http://www.cs.wm.edu/~coppit/csci
690-spring2004/papers/selep_main.pdf) (PDF) on May 17, 2008. Retrieved 2009-03-03. "At
its meeting in May 2000, the Council further concluded that the framework of a licensed
professional engineer, originally developed for civil engineers, does not match the
professional industrial practice of software engineering. Such licensing practices would give
false assurances of competence even if the body of knowledge were mature; and would
preclude many of the most qualified software engineers from becoming licensed."
74. Canadian Information Processing Society. "I.S.P. Designation" (http://www.cips.ca/standard
s/isp). Retrieved 2007-03-15.
75. "Professional Engineers Ontario: Welcome to PEO's website" (http://www.peo.on.ca).
Peo.on.ca. Retrieved 2012-03-25.
76. Thibodaux, Patrick (2006-05-05). "As outsourcing gathers steam, computer science interest
wanes" (http://www.computerworld.com/article/2555175/it-careers/as-outsourcing-gathers-st
eam--computer-science-interest-wanes.html). Computerworld.com. Retrieved 2016-12-06.
77. "Computer Programmers" (http://www.bls.gov/oco/ocos110.htm#outlook). Bls.gov. Retrieved
2012-03-25.
78. Mullins, Robert (2007-03-13). "Software developer growth slows in North America" (https://w
eb.archive.org/web/20090404033214/http://www.infoworld.com/article/07/03/13/HNslowsoft
dev_1.html). InfoWorld.Archived from the original (http://www.infoworld.com/article/07/03/13/
HNslowsoftdev_1.html) on 2009-04-04. Retrieved 2012-03-25.
79. "Gartner Magic Quadrant" (http://www.cognizant.com/html/content/news/GartnerMQ_Cogniz
ant.pdf) (PDF). Cognizant.com. Retrieved 2012-03-25.
80. Casey, Valentine (2010-08-20). "Virtual software team project management" (http://eprints.dk
it.ie/116/1/VCaseyRevisedVersion.doc). Journal of the Brazilian Computer Society. 16 (2):
83–96. doi:10.1007/s13173-010-0013-3 (https://doi.org/10.1007%2Fs13173-010-0013-3).
S2CID 14383734 (https://api.semanticscholar.org/CorpusID:14383734).
81. Some external links:
SIGSOFT Awards (http://www.sigsoft.org/awards/index.htm)
ICSE's Most Influential Paper Award (http://www.sigsoft.org/awards/mostInfPapAwd.htm)
A list of various Software Engineering (and SE-related) Awards (http://people.engr.ncsu.e
du/txie/seawards.html)
82. Dijkstra, E. W. (1988). "On the cruelty of really teaching computing science" (http://www.cs.ut
exas.edu/~EWD/transcriptions/EWD10xx/EWD1036.html). Retrieved 2014-01-10.
Abran,Alain; Moore, James W.; Bourque, Pierre; Dupuis, Robert; Tripp, Leonard L. (2004).
Guide to the Software Engineering Body of Knowledge. IEEE. ISBN 978-0-7695-2330-9.
Sources
Sommerville, Ian (2010). Software Engineering (https://books.google.com/books?id=PqsWa
BkFh1wC) (7th ed.). Pearson Education. ISBN 978-81-7758-530-8. Retrieved 10 January
2013.
Guide to the Software Engineering Body of Knowledge (SWEBOK Guide): Version 3.0.
Pierre Bourque, Richard E. Fairley (eds.). IEEE Computer Society. 2014. ISBN 978-0-7695-
5166-1.
Pressman, Roger S (2009). Software Engineering:A Practitioner's Approach (7th ed.).
Boston, Mass: McGraw-Hill. ISBN 978-0-07-337597-7.
Sommerville, Ian (2010) [2010]. Software Engineering (http://www.pearsoned.co.uk/HigherE
ducation/Booksby/Sommerville/) (9th ed.). Harlow, England: Pearson Education. ISBN 978-
0-13-703515-1.
Jalote, Pankaj (2005) [1991]. An Integrated Approach to Software Engineering (https://www.s
pringer.com/gp/book/9780387208817) (3rd ed.). Springer. ISBN 978-0-387-20881-7.
Bruegge, Bernd; Dutoit,Allen (2009). Object-oriented software engineering : using UML,
patterns, and Java (https://archive.org/details/objectorientedso0000brue) (3rd ed.). Prentice
Hall. ISBN 978-0-13-606125-0.
Oshana, Robert (2019-06-21). Software engineering for embedded systems : methods,
practical techniques, and applications (Second ed.). Kidlington, Oxford, United Kingdom.
ISBN 978-0-12-809433-4.
Guide to the Software Engineering Body of Knowledge (http://www.swebok.org/)
The Open Systems Engineering and Software Development Life Cycle Framework (http://op
ensdlc.org/) Archived (https://web.archive.org/web/20100718114646/http://opensdlc.org/)
2010-07-18 at the Wayback Machine OpenSDLC.org the integrated Creative Commons
SDLC
Software Engineering Institute (http://www.sei.cmu.edu/) Carnegie Mellon
Retrieved from "https://en.wikipedia.org/w/index.php?title=Software_engineering&oldid=1155051910"
Further reading
External links
ChatGPT is a large language model developed by OpenAI. It is based on the GPT-3.5 architecture, which stands for "Generative Pre-trained 
Transformer 3.5". ChatGPT is designed to generate human-like responses based on the input it receives.

ChatGPT has been trained on a vast amount of text data from the internet, allowing it to understand and generate text in a wide range of
 topics and styles. It can perform various language-related tasks such as answering questions, providing explanations, giving suggestions, and engaging in interactive conversations.

The model relies on a transformer architecture, which is a deep learning model known for its ability to process sequential data efficiently.
 It can understand and generate coherent text by capturing the context and semantic meaning of the input.

ChatGPT is a powerful tool for natural language understanding and generation, and it can be used for a variety of applications such as chatbots,
 virtual assistants, content generation, and more.
Software engineering is a discipline that focuses on the systematic and disciplined approach to designing, developing, testing, and maintaining 
software systems. It involves the application of engineering principles, techniques, and best practices to ensure the production of high-quality 
software that meets user requirements.

The goal of software engineering is to create software that is reliable, efficient, maintainable, and scalable. It encompasses a wide range of 
activities throughout the software development lifecycle, including requirements analysis, software design, coding, testing, deployment, and maintenance.

Software engineers use various methodologies and techniques to manage the complexity of software development projects and ensure successful outcomes.
 This includes practices such as agile development, waterfall model, DevOps, version control, documentation, and quality assurance.

Software engineering also involves collaboration and communication with stakeholders, including clients, users, project managers, and other members of 
the development team. It requires technical expertise, problem-solving skills, and a deep understanding of software development principles and technologies.

Overall, software engineering aims to apply engineering principles and best practices to create software systems that meet user needs, are reliable and 
scalable, and adhere to quality standards.
Data engineering is a discipline within the field of data management that focuses on designing, constructing, and maintaining the systems and infrastructure
 necessary for the processing, storage, and analysis of large volumes of data. It involves various activities related to data acquisition, data transformation,
 data storage, and data integration to ensure that data is available, reliable, and accessible for analysis and decision-making.

Data engineers work with different types of data, including structured, semi-structured, and unstructured data, and they play a crucial role in enabling 
organizations to derive insights and value from their data assets. Some key responsibilities of data engineers include:

1. Data Acquisition: Data engineers gather data from various sources such as databases, APIs, logs, streaming platforms, and external data providers. They 
understand the data requirements and design processes to extract and collect data efficiently.

2. Data Transformation: Data engineers clean, transform, and preprocess the raw data to make it usable for analysis and modeling. This involves tasks 
such as data cleansing, data validation, data normalization, data aggregation, and feature engineering.

3. Data Storage: Data engineers design and implement data storage systems that can handle large volumes of data. They work with databases, data warehouses, 
data lakes, and distributed file systems to store and organize the data in a scalable and efficient manner.

4. Data Integration: Data engineers integrate data from multiple sources, ensuring consistency and compatibility. They develop pipelines and workflows to 
efficiently move and transform data between different systems and platforms.

5. Data Quality and Governance: Data engineers establish processes and mechanisms to ensure data quality, data lineage, and data governance. They implement data 
validation checks, monitor data quality metrics, and enforce data management best practices.

6. Performance Optimization: Data engineers optimize data processing and query performance to ensure timely and efficient data retrieval and analysis. They tune 
database configurations, use indexing techniques, and employ distributed computing frameworks
 
 Intro
First of all, it should be noted that we'll be talking in the context of the Unity UI (uGUI) technology, which is still recommended for Runtime according to the documentation. The approach described is not applicable to UI Toolkit, IMGUI, or other UI building systems.

Most often in Unity projects, you'll come across UI implementation built on View classes inherited from MonoBehaviour and peppered with a large number of SerializeField fields. This approach provides full control over the behavior of the UI, but it also makes it necessary to write a large amount of code at the View and Presenter levels (depending on the architecture used).


Often, as project development continues, these classes swell to incredible sizes, and the components on GameObject themselves are covered with a huge number of links to internal objects:
